Index: TEST/readme.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+> python csv_process.py --file products.csv --where \"rating<4.5\"\n\n+-------------+---------+---------+----------+\n| name        | brand   |   price |   rating |\n+=============+=========+=========+==========+\n| galaxy a54  | samsung |     349 |      4.2 |\n+-------------+---------+---------+----------+\n| poco x5 pro | xiaomi  |     299 |      4.4 |\n+-------------+---------+---------+----------+\n| iphone se   | apple   |     429 |      4.1 |\n+-------------+---------+---------+----------+\n| redmi 10c   | xiaomi  |     149 |      4.1 |\n+-------------+---------+---------+----------+\n\n(venv) ➜  TEST git:(main) ✗ python csv_process.py --file products.csv --where \"price>500\"\n\n+------------------+---------+---------+----------+\n| name             | brand   |   price |   rating |\n+==================+=========+=========+==========+\n| iphone 15 pro    | apple   |     999 |      4.9 |\n+------------------+---------+---------+----------+\n| galaxy s23 ultra | samsung |    1199 |      4.8 |\n+------------------+---------+---------+----------+\n| iphone 14        | apple   |     799 |      4.7 |\n+------------------+---------+---------+----------+\n| galaxy z flip 5  | samsung |     999 |      4.6 |\n+------------------+---------+---------+----------+\n| iphone 13 mini   | apple   |     599 |      4.5 |\n+------------------+---------+---------+----------+\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TEST/readme.md b/TEST/README.md
rename from TEST/readme.md
rename to TEST/README.md
--- a/TEST/readme.md	(revision 8e77f4b46e49e3695a8ad906f4eded0b30c697a7)
+++ b/TEST/README.md	(date 1750973612961)
@@ -1,30 +1,1 @@
- python csv_process.py --file products.csv --where "rating<4.5"
-
-+-------------+---------+---------+----------+
-| name        | brand   |   price |   rating |
-+=============+=========+=========+==========+
-| galaxy a54  | samsung |     349 |      4.2 |
-+-------------+---------+---------+----------+
-| poco x5 pro | xiaomi  |     299 |      4.4 |
-+-------------+---------+---------+----------+
-| iphone se   | apple   |     429 |      4.1 |
-+-------------+---------+---------+----------+
-| redmi 10c   | xiaomi  |     149 |      4.1 |
-+-------------+---------+---------+----------+
-
-(venv) ➜  TEST git:(main) ✗ python csv_process.py --file products.csv --where "price>500"
-
-+------------------+---------+---------+----------+
-| name             | brand   |   price |   rating |
-+==================+=========+=========+==========+
-| iphone 15 pro    | apple   |     999 |      4.9 |
-+------------------+---------+---------+----------+
-| galaxy s23 ultra | samsung |    1199 |      4.8 |
-+------------------+---------+---------+----------+
-| iphone 14        | apple   |     799 |      4.7 |
-+------------------+---------+---------+----------+
-| galaxy z flip 5  | samsung |     999 |      4.6 |
-+------------------+---------+---------+----------+
-| iphone 13 mini   | apple   |     599 |      4.5 |
-+------------------+---------+---------+----------+
-
+!
\ No newline at end of file
Index: Disposable_secrets.py
===================================================================
diff --git a/Disposable_secrets.py b/Disposable_secrets.py
deleted file mode 100644
--- a/Disposable_secrets.py	(revision 8e77f4b46e49e3695a8ad906f4eded0b30c697a7)
+++ /dev/null	(revision 8e77f4b46e49e3695a8ad906f4eded0b30c697a7)
@@ -1,143 +0,0 @@
-from fastapi import FastAPI, HTTPException, Request, status
-from fastapi.responses import JSONResponse
-from fastapi.middleware.cors import CORSMiddleware
-from pydantic import BaseModel
-from typing import Optional
-from uuid import uuid4
-from datetime import datetime, timedelta
-from cryptography.fernet import Fernet
-import asyncpg
-import asyncio
-import os
-import uvicorn
-
-# Генерация ключа шифрования (в проде — хранить безопасно)
-FERNET_KEY = Fernet.generate_key()
-fernet = Fernet(FERNET_KEY)
-
-# Псевдо-кеш (можно заменить на Redis/CacheTools)
-memory_cache = {}
-
-# Настройки окружения (использовать os.environ в docker)
-DB_SETTINGS = {
-    "user": os.getenv("POSTGRES_USER", "postgres"),
-    "password": os.getenv("POSTGRES_PASSWORD", "postgres"),
-    "database": os.getenv("POSTGRES_DB", "secrets_db"),
-    "host": os.getenv("POSTGRES_HOST", "localhost"),
-    "port": int(os.getenv("POSTGRES_PORT", 5432)),
-}
-
-# FastAPI и CORS
-app = FastAPI()
-app.add_middleware(
-    CORSMiddleware,
-    allow_origins=["*"],
-    allow_credentials=True,
-    allow_methods=["*"],
-    allow_headers=["*"],
-)
-
-# Pydantic схемы
-class SecretCreate(BaseModel):
-    secret: str
-    passphrase: Optional[str] = None
-    ttl_seconds: Optional[int] = 3600
-
-class SecretResponse(BaseModel):
-    secret_key: str
-
-class SecretOut(BaseModel):
-    secret: str
-
-class DeleteResponse(BaseModel):
-    status: str
-
-# Подключение к БД
-@app.on_event("startup")
-async def startup():
-    app.state.db = await asyncpg.create_pool(**DB_SETTINGS)
-    async with app.state.db.acquire() as conn:
-        await conn.execute("""
-            CREATE TABLE IF NOT EXISTS logs (
-                id SERIAL PRIMARY KEY,
-                action TEXT,
-                secret_key TEXT,
-                ip TEXT,
-                created_at TIMESTAMP DEFAULT now()
-            );
-        """)
-
-# Хелперы
-async def log_action(db, action, secret_key, ip):
-    await db.execute(
-        "INSERT INTO logs (action, secret_key, ip) VALUES ($1, $2, $3)",
-        action, secret_key, ip
-    )
-
-# Эндпоинты
-@app.post("/secret", response_model=SecretResponse)
-async def create_secret(data: SecretCreate, request: Request):
-    secret_key = str(uuid4())
-    encrypted = fernet.encrypt(data.secret.encode())
-    expires_at = datetime.utcnow() + timedelta(seconds=data.ttl_seconds or 3600)
-
-    memory_cache[secret_key] = {
-        "secret": encrypted,
-        "passphrase": data.passphrase,
-        "expires_at": expires_at,
-    }
-
-    await log_action(app.state.db, "created", secret_key, request.client.host)
-    return {"secret_key": secret_key}
-
-@app.get("/secret/{secret_key}", response_model=SecretOut)
-async def get_secret(secret_key: str, request: Request):
-    secret_data = memory_cache.pop(secret_key, None)
-    if not secret_data:
-        raise HTTPException(status_code=404, detail="Secret not found or already retrieved")
-
-    if datetime.utcnow() > secret_data["expires_at"]:
-        raise HTTPException(status_code=410, detail="Secret expired")
-
-    await log_action(app.state.db, "retrieved", secret_key, request.client.host)
-    decrypted = fernet.decrypt(secret_data["secret"]).decode()
-    return {"secret": decrypted}
-
-@app.delete("/secret/{secret_key}", response_model=DeleteResponse)
-async def delete_secret(secret_key: str, passphrase: Optional[str] = None, request: Request = None):
-    secret_data = memory_cache.get(secret_key)
-    if not secret_data:
-        raise HTTPException(status_code=404, detail="Secret not found or already retrieved")
-
-    if secret_data["passphrase"] and secret_data["passphrase"] != passphrase:
-        raise HTTPException(status_code=403, detail="Incorrect passphrase")
-
-    memory_cache.pop(secret_key)
-    await log_action(app.state.db, "deleted", secret_key, request.client.host)
-    return {"status": "secret_deleted"}
-
-# Запрет кеширования на клиенте
-@app.middleware("http")
-async def add_no_cache_headers(request: Request, call_next):
-    response = await call_next(request)
-    response.headers["Cache-Control"] = "no-store"
-    response.headers["Pragma"] = "no-cache"
-    response.headers["Expires"] = "0"
-    return response
-
-# Фоновая задача очистки
-async def cleanup_expired():
-    while True:
-        now = datetime.utcnow()
-        to_delete = [key for key, val in memory_cache.items() if val["expires_at"] < now]
-        for key in to_delete:
-            memory_cache.pop(key)
-        await asyncio.sleep(60)
-
-@app.on_event("startup")
-async def start_cleanup():
-    asyncio.create_task(cleanup_expired())
-
-# Запуск (для dev)
-if __name__ == "__main__":
-    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)
